apiVersion: kro.run/v1alpha1
kind: ResourceGroup
metadata:
  name: ekscluster.kro.run
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
spec:
  schema:
    apiVersion: v1alpha1
    kind: EksCluster
    spec:
      name: string
      namespace: string
      region: string
      subnets:
        controlplane:
          subnet1Name: string
          subnet2Name: string
      accountId: string
      k8sVersion: string
  resources:
  - id: clusterRole
    template:
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: Role
      metadata:
        namespace: ${schema.spec.namespace}
        name: ${schema.spec.name}-cluster-role
      spec:
        name: ${schema.spec.name}-cluster-role
        policies:
        - arn:aws:iam::aws:policy/AmazonEKSComputePolicy
        - arn:aws:iam::aws:policy/AmazonEKSBlockStoragePolicy
        - arn:aws:iam::aws:policy/AmazonEKSLoadBalancingPolicy
        - arn:aws:iam::aws:policy/AmazonEKSNetworkingPolicy
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        assumeRolePolicyDocument: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "eks.amazonaws.com"
                },
                "Action": [
                  "sts:AssumeRole",
                  "sts:TagSession"
                ]
              }
            ]
          }
  - id: nodeRole
    template:
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: Role
      metadata:
        namespace: ${schema.spec.namespace}
        name: ${schema.spec.name}-cluster-node-role
      spec:
        name: ${schema.spec.name}-cluster-node-role
        policies:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodeMinimalPolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPullOnly
        assumeRolePolicyDocument: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "ec2.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }

  - id: fargateExecutionRole
    template:
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: Role
      metadata:
        namespace: ${schema.spec.namespace}
        name: ${schema.spec.name}-fargate-pod-execution-role
      spec:
        name: ${schema.spec.name}-fargate-pod-execution-role
        policies:
        - arn:aws:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy
        assumeRolePolicyDocument: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "eks-fargate-pods.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }

  - id: karpenterControllerRole
    dependsOn:
      - ekscluster
    template:
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: Role
      metadata:
        namespace: ${schema.spec.namespace}
        name: ${schema.spec.name}-karpenter-controller
      spec:
        name: ${schema.spec.name}-karpenter-controller
        assumeRolePolicyDocument: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Federated": "arn:aws:iam::${schema.spec.accountId}:oidc-provider/${trim(ekscluster.status.identity.oidc.issuer, 'https://')}"
                },
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringEquals": {
                    "${trim(ekscluster.status.identity.oidc.issuer, 'https://')}:aud": "sts.amazonaws.com",
                    "${trim(ekscluster.status.identity.oidc.issuer, 'https://')}:sub": "system:serviceaccount:karpenter:karpenter"
                  }
                }
              }
            ]
          }
        inlinePolicies:
          karpenter-policy: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateLaunchTemplate",
                    "ec2:CreateFleet",
                    "ec2:RunInstances",
                    "ec2:CreateTags",
                    "iam:PassRole",
                    "ec2:TerminateInstances",
                    "ec2:DescribeLaunchTemplates",
                    "ec2:DescribeInstances",
                    "ec2:DescribeSecurityGroups",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeInstanceTypes",
                    "ec2:DescribeInstanceTypeOfferings",
                    "ec2:DescribeAvailabilityZones",
                    "ssm:GetParameter"
                  ],
                  "Resource": "*"
                }
              ]
            }




  - id: ekscluster
    dependsOn:
      - clusterRole
    template:
      apiVersion: eks.services.k8s.aws/v1alpha1
      kind: Cluster
      metadata:
        namespace: ${schema.spec.namespace}
        name: ${schema.spec.name}
      spec:
        name: ${schema.spec.name}
        roleRef:
          from:
            name: ${schema.spec.name}-cluster-role
        version: ${schema.spec.k8sVersion}
        accessConfig:
          authenticationMode: "API_AND_CONFIG_MAP"
        kubernetesNetworkConfig:
          ipFamily: ipv4
        resourcesVPCConfig:
          endpointPrivateAccess: true
          endpointPublicAccess: true
          subnetRefs:
            - from:
                name: ${schema.spec.subnets.controlplane.subnet1Name}
            - from:
                name: ${schema.spec.subnets.controlplane.subnet2Name}

  - id: fargateProfile
    dependsOn:
      - ekscluster
      - fargateExecutionRole
    template:
      apiVersion: eks.services.k8s.aws/v1alpha1
      kind: FargateProfile
      metadata:
        namespace: ${schema.spec.namespace}
        name: ${schema.spec.name}-fargate-profile
      spec:
        name: ${schema.spec.name}-fargate-profile
        clusterRef:
          from:
            name: ${schema.spec.name}
        podExecutionRoleRef:
          from:
            name: ${schema.spec.name}-fargate-pod-execution-role
        selectors:
          - namespace: karpenter
        subnetRefs:
          - from:
              name: ${schema.spec.subnets.controlplane.subnet1Name}
          - from:
              name: ${schema.spec.subnets.controlplane.subnet2Name}

  - id: oidcProvider
    template:
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: OpenIDConnectProvider
      metadata:
        namespace: ${schema.spec.namespace}
        name: ${schema.spec.name}-oidc
      spec:
        url: ${ekscluster.status.identity.oidc.issuer}
        clientIDs:
          - sts.amazonaws.com
        thumbprints:
          - '9e99a48a9960b14926bb7f3b02e22da2b0ab7280'
  # - id: argocdRole
  #   template:
  #     apiVersion: iam.services.k8s.aws/v1alpha1
  #     kind: Role
  #     metadata:
  #       name: ${schema.spec.name}-argocd-role
  #     spec:
  #       name: ${schema.spec.name}-argocd-role
  #       assumeRolePolicyDocument: |
  #         {
  #           "Version": "2012-10-17",
  #           "Statement": [
  #             {
  #               "Effect": "Allow",
  #               "Principal": {
  #                 "AWS": "arn:aws:iam::656220021423:role/argocd-20250208105218737900000004"
  #               },
  #               "Action": [
  #                 "sts:TagSession",
  #                 "sts:AssumeRole"
  #               ]
  #             }
  #           ]
  #         }
  # - id: argocdSecret
  #   template:
  #     apiVersion: v1
  #     kind: Secret
  #     metadata:
  #       name: ${schema.spec.name}
  #       namespace: argocd
  #       labels:
  #         argocd.argoproj.io/secret-type: cluster
  #         enable_metrics_server: "true"
  #         tenant: "spoke"
  #       annotations:
  #         accountId: ${schema.spec.accountId}
  #         region: ${schema.spec.region}
  #         oidcProvider: ${ekscluster.status.identity.oidc.issuer}
  #         addons_repo_basepath: addons/
  #         addons_repo_path: bootstrap
  #         addons_repo_revision: main
  #         addons_repo_url: https://github.com/iamahgoub/gitops-fleet-management.git
  #     type: Opaque
  #     stringData:
  #       name: ${schema.spec.name}
  #       server: "${ekscluster.status.endpoint}"
  #       config: |
  #         {
  #           "awsAuthConfig": {
  #             "clusterName": "${schema.spec.name}",
  #             "roleARN": "${argocdRole.status.ackResourceMetadata.arn}"
  #           },
  #           "tlsClientConfig": {
  #             "insecure": false,
  #             "caData": "${ekscluster.status.certificateAuthority.data}"
  #           }
  #         }
  # - id: accessEntry
  #   template:
  #     apiVersion: eks.services.k8s.aws/v1alpha1
  #     kind: AccessEntry
  #     metadata:
  #       namespace: ${schema.spec.namespace}
  #       name: ${schema.spec.name}-accessentry
  #     spec:
  #       clusterName: ${schema.spec.name}
  #       accessPolicies:
  #       - accessScope:
  #           type: "cluster"
  #         policyARN: "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
  #       principalARN: "${argocdRole.status.ackResourceMetadata.arn}"
