apiVersion: kro.run/v1alpha1
kind: ResourceGroup
metadata:
  name: ekscluster.kro.run
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
spec:
  schema:
    apiVersion: v1alpha1
    kind: EksCluster
    spec:
      name: string
      namespace: string
      region: string
      subnets:
        controlplane:
          subnet1Name: string
          subnet2Name: string
      accountId: string
      k8sVersion: string
  resources:
  - id: clusterRole
    template:
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: Role
      metadata:
        namespace: ${schema.spec.namespace}
        name: ${schema.spec.name}-cluster-role
      spec:
        name: ${schema.spec.name}-cluster-role
        policies:
        - arn:aws:iam::aws:policy/AmazonEKSComputePolicy
        - arn:aws:iam::aws:policy/AmazonEKSBlockStoragePolicy
        - arn:aws:iam::aws:policy/AmazonEKSLoadBalancingPolicy
        - arn:aws:iam::aws:policy/AmazonEKSNetworkingPolicy
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        assumeRolePolicyDocument: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "eks.amazonaws.com"
                },
                "Action": [
                  "sts:AssumeRole",
                  "sts:TagSession"
                ]
              }
            ]
          }

  - id: fargateExecutionRole
    template:
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: Role
      metadata:
        namespace: ${schema.spec.namespace}
        name: ${schema.spec.name}-fargate-pod-execution-role
      spec:
        name: ${schema.spec.name}-fargate-pod-execution-role
        policies:
        - arn:aws:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy
        assumeRolePolicyDocument: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "eks-fargate-pods.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }

  - id: ekscluster
    dependsOn:
      - clusterRole
    template:
      apiVersion: eks.services.k8s.aws/v1alpha1
      kind: Cluster
      metadata:
        namespace: ${schema.spec.namespace}
        name: ${schema.spec.name}
      spec:
        name: ${schema.spec.name}
        roleRef:
          from:
            name: ${schema.spec.name}-cluster-role
        version: ${schema.spec.k8sVersion}
        accessConfig:
          authenticationMode: "API_AND_CONFIG_MAP"
        kubernetesNetworkConfig:
          ipFamily: ipv4
        resourcesVPCConfig:
          endpointPrivateAccess: true
          endpointPublicAccess: true
          subnetRefs:
            - from:
                name: ${schema.spec.subnets.controlplane.subnet1Name}
            - from:
                name: ${schema.spec.subnets.controlplane.subnet2Name}

  - id: fargateProfile
    dependsOn:
      - ekscluster
      - fargateExecutionRole
    template:
      apiVersion: eks.services.k8s.aws/v1alpha1
      kind: FargateProfile
      metadata:
        namespace: ${schema.spec.namespace}
        name: ${schema.spec.name}-fargate-profile
      spec:
        name: ${schema.spec.name}-fargate-profile
        clusterRef:
          from:
            name: ${schema.spec.name}
        podExecutionRoleRef:
          from:
            name: ${schema.spec.name}-fargate-pod-execution-role
        selectors:
          - namespace: karpenter
        subnetRefs:
          - from:
              name: ${schema.spec.subnets.controlplane.subnet1Name}
          - from:
              name: ${schema.spec.subnets.controlplane.subnet2Name}

  - id: oidcProvider
    template:
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: OpenIDConnectProvider
      metadata:
        namespace: ${schema.spec.namespace}
        name: ${schema.spec.name}-oidc
      spec:
        url: ${ekscluster.status.identity.oidc.issuer}
        clientIDs:
          - sts.amazonaws.com
        thumbprints:
          - '9e99a48a9960b14926bb7f3b02e22da2b0ab7280'

  - id: argocdRole
    dependsOn:
      - oidcProvider
    template:
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: Role
      metadata:
        name: ${schema.spec.name}-argocd-role
      spec:
        name: ${schema.spec.name}-argocd-role
        assumeRolePolicyDocument: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Federated": "${oidcProvider.status.ackResourceMetadata.arn}"
                },
                "Action": [
                  "sts:TagSession",
                  "sts:AssumeRole"
                ],
                "Condition": {
                  "StringEquals": {
                    "${oidcProvider.spec.url.substring(8)}:aud": "sts.amazonaws.com",
                    "${oidcProvider.spec.url.substring(8)}:sub": "system:serviceaccount:argocd:argocd-application-controller"
                  }
                }
              }
            ]
          }

  - id: argocdSecret
    dependsOn:
      - ekscluster
      - argocdRole
      - karpenterControllerRole
    template:
      apiVersion: v1
      kind: Secret
      metadata:
        name: ${schema.spec.name}
        namespace: argocd
        labels:
          argocd.argoproj.io/secret-type: cluster
          enable_metrics_server: "true"
          tenant: "spoke"
        annotations:
          accountId: ${schema.spec.accountId}
          region: ${schema.spec.region}
          oidcProvider: ${oidcProvider.spec.url}
          # karpenterRoleArn: ${karpenterControllerRole.status.ackResourceMetadata.arn}
      type: Opaque
      stringData:
        name: ${schema.spec.name}
        server: "${ekscluster.status.endpoint}"
        config: |
          {
            "awsAuthConfig": {
              "clusterName": "${schema.spec.name}",
              "roleARN": "${argocdRole.status.ackResourceMetadata.arn}"
            },
            "tlsClientConfig": {
              "insecure": false,
              "caData": "${ekscluster.status.certificateAuthority.data}"
            }
          }

  - id: accessEntry
    dependsOn:
      - ekscluster
      - argocdRole
    template:
      apiVersion: eks.services.k8s.aws/v1alpha1
      kind: AccessEntry
      metadata:
        namespace: ${schema.spec.namespace}
        name: ${schema.spec.name}-accessentry
      spec:
        clusterName: ${schema.spec.name}
        accessPolicies:
        - accessScope:
            type: "cluster"
          policyARN: "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
        principalARN: "${argocdRole.status.ackResourceMetadata.arn}"

  - id: clusterInfo
    dependsOn:
      - ekscluster
      - oidcProvider
      - karpenterControllerRole
      - nodeRole
      - karpenterInstanceProfile
    template:
      apiVersion: secretsmanager.services.k8s.aws/v1alpha1
      kind: Secret
      metadata:
        name: ${schema.spec.name}-cluster-info
        namespace: ${schema.spec.namespace}
      spec:
        name: ${schema.spec.name}-cluster-info
        description: "Cluster information for ${schema.spec.name}"
        secretString:
          key: "cluster-info"
          name: ${schema.spec.name}-cluster-info
          namespace: ${schema.spec.namespace}
        tags:
          - key: "Name"
            value: ${schema.spec.name}-cluster-info
          - key: "ClusterName"
            value: ${schema.spec.name}
          - key: "ManagedBy"
            value: "kro"

  - id: clusterInfoValue
    dependsOn:
      - clusterInfo
    template:
      apiVersion: v1
      kind: Secret
      metadata:
        name: ${schema.spec.name}-cluster-info-value
        namespace: ${schema.spec.namespace}
      stringData:
        cluster-info: |
          {
            "oidc_provider_arn": "${oidcProvider.status.ackResourceMetadata.arn}",
            "oidc_provider_url": "${oidcProvider.spec.url.substring(8)}"
          }


  - id: clusterInfoCM
    dependsOn:
      - ekscluster
      - oidcProvider
      - karpenterControllerRole
      - nodeRole
      - karpenterInstanceProfile
    template:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: ${schema.spec.name}-cluster-info
        namespace: ${schema.spec.namespace}
      data:
        cluster_name: ${schema.spec.name}
        cluster_endpoint: ${ekscluster.status.endpoint}
        oidc_provider_arn: ${oidcProvider.status.ackResourceMetadata.arn}
        oidc_provider_url: ${oidcProvider.spec.url.substring(8)}
        # controller_role_arn: ${karpenterControllerRole.status.ackResourceMetadata.arn}
        # node_role_name: ${schema.spec.name}-cluster-node-role
        # instance_profile_name: ${schema.spec.name}-karpenter-instance-profile
